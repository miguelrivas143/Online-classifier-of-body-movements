# -*- coding: utf-8 -*-
"""AlgorithmEval_Alan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16MjgW-96PnBjZeKFMEvc0bob6GCctXsR
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import cross_val_predict, StratifiedKFold
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report
from google.colab import drive
from sklearn.svm import SVC
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF

drive.mount('/content/drive')

person = "Alan"

df1 = pd.read_csv("/content/drive/MyDrive/AI_Modeling/Project1/Miguel_all_features.csv")
df1.head()

from google.colab import drive
drive.mount('/content/drive')

"""#Models"""

y = df1.iloc[:, 0] #The first column corresponds to the class label
X = df1.iloc[:, 1:] #We use the rest to classify

kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42) #WE evaluate with Kfold (5 folds)
scaler = StandardScaler()

"""##Linear SVM"""

svm = SVC(kernel='linear', random_state=42)
pipeline_svm = make_pipeline(StandardScaler(), svm)
y_pred_svm = cross_val_predict(pipeline_svm, X, y, cv=kfold)

print("Results for SVM!\n")
print(classification_report(y, y_pred_svm)) #Results from SVM

accuracy1 = accuracy_score(y, y_pred_svm)
print(f"Overall accuracy for linear SVM: {accuracy1:.3f}")

"""##Radial basis SVM"""

svm_rbf = SVC(kernel='rbf', gamma='scale', random_state=42)
pipeline_svm_rbf = make_pipeline(scaler, svm_rbf)
y_pred_svm_rbf = cross_val_predict(pipeline_svm_rbf, X, y, cv=kfold)

print("Resultados for SVM with RBF\n")
print(classification_report(y, y_pred_svm_rbf))

accuracy2 = accuracy_score(y, y_pred_svm)
print(f"Overall accuracy for radial basis SVM: {accuracy2:.3f}")

"""##LDA"""

lda = LinearDiscriminantAnalysis()
pipeline_lda = make_pipeline(scaler, lda)
y_pred_lda = cross_val_predict(pipeline_lda, X, y, cv=kfold)

print("Resultados para LDA\n")
print(classification_report(y, y_pred_lda))

accuracy3 = accuracy_score(y, y_pred_lda)
print(f"Overall accuracy for LDA: {accuracy3:.3f}")

"""##K-nn"""

knn = KNeighborsClassifier(n_neighbors=5)
pipeline_knn = make_pipeline(scaler, knn)
y_pred_knn = cross_val_predict(pipeline_knn, X, y, cv=kfold)

print("Resultados para k-NN\n")
print(classification_report(y, y_pred_knn))

accuracy4 = accuracy_score(y, y_pred_knn)
print(f"Overall accuracy for k-NN: {accuracy4:.3f}")

"""##Multilayer Perceptron"""

mlp = MLPClassifier(hidden_layer_sizes=(50, 25), activation='relu', solver='adam', max_iter=1000, random_state=42)
pipeline_mlp = make_pipeline(scaler, mlp)

y_pred_mlp = cross_val_predict(pipeline_mlp, X, y, cv=kfold)

print("Results for MLP!\n")
print(classification_report(y, y_pred_mlp))

accuracy5 = accuracy_score(y, y_pred_mlp)
print(f"Overall accuracy for MLP: {accuracy5:.3f}")

"""##Gaussian Naive Bayes


"""

gnb = GaussianNB()
pipeline_gnb = make_pipeline(scaler, gnb)
y_pred_gnb = cross_val_predict(pipeline_gnb, X, y, cv=kfold)

print("Results for GaussianNB!\n")
print(classification_report(y, y_pred_gnb))

accuracy_gnb = accuracy_score(y, y_pred_gnb)
print(f"Overall accuracy for GaussianNB: {accuracy_gnb:.3f}")

"""##Passive-Agressive classifier"""

pa = PassiveAggressiveClassifier(max_iter=1000, random_state=42)
pipeline_pa = make_pipeline(scaler, pa)

y_pred_pa = cross_val_predict(pipeline_pa, X, y, cv=kfold)

print("Results for Passive Aggressive Classifier!\n")
print(classification_report(y, y_pred_pa))

accuracy_pa = accuracy_score(y, y_pred_pa)
print(f"Overall accuracy for Passive Aggressive Classifier: {accuracy_pa:.3f}")

"""##Bagging Classifier"""

bagging = BaggingClassifier(estimator=DecisionTreeClassifier(), n_estimators=50, random_state=42)
pipeline_bagging = make_pipeline(scaler, bagging)

y_pred_bagging = cross_val_predict(pipeline_bagging, X, y, cv=kfold)

print("Results for Bagging Classifier!\n")
print(classification_report(y, y_pred_bagging))

accuracy_bagging = accuracy_score(y, y_pred_bagging)
print(f"Overall accuracy for Bagging Classifier: {accuracy_bagging:.3f}")

"""##Extra Trees Classifier"""

extratrees = ExtraTreesClassifier(n_estimators=100, random_state=42)
pipeline_extratrees = make_pipeline(scaler, extratrees)

y_pred_extratrees = cross_val_predict(pipeline_extratrees, X, y, cv=kfold)

print("Results for Extra Trees Classifier!\n")
print(classification_report(y, y_pred_extratrees))

accuracy_extratrees = accuracy_score(y, y_pred_extratrees)
print(f"Overall accuracy for Extra Trees Classifier: {accuracy_extratrees:.3f}")

"""##Gaussina Process Classfier"""

kernel = RBF()
gpc = GaussianProcessClassifier(kernel=kernel, random_state=42)
pipeline_gpc = make_pipeline(StandardScaler(), gpc)

y_pred_gpc = cross_val_predict(pipeline_gpc, X, y, cv=kfold)

print("Results for Gaussian Process Classifier!\n")
print(classification_report(y, y_pred_gpc))

accuracy_gpc = accuracy_score(y, y_pred_gpc)
print(f"Overall accuracy for Gaussian Process Classifier: {accuracy_gpc:.3f}")

"""#Saving Model For Online Classifier"""

from joblib import dump

final_model = make_pipeline(
    StandardScaler(),
    ExtraTreesClassifier(n_estimators=100, random_state=42)
)

final_model.fit(X, y)
dump(final_model, 'extra_trees_model_Alan.pkl')

from google.colab import files
files.download('extra_trees_model_Alan.pkl')